{"version":3,"sources":["../src/index.ts","../src/client.ts","../src/errors.ts","../src/otp.ts"],"sourcesContent":["// src/index.ts\n\nimport { initClient } from './client';\nimport { InitOTPClientOptions, SendOTPParams, VerifyOTPParams } from './types';\nimport { sendOTP, verifyOTP } from './otp';\n\nexport const initOTPClient = (options: InitOTPClientOptions) => {\n  initClient(options);\n};\n\nexport { sendOTP, verifyOTP };\n","// src/client.ts\nimport axios, { AxiosInstance, AxiosError } from 'axios';\nimport {\n  OnetimeClientError,\n  OnetimeServerError,\n  OnetimeNetworkError,\n} from './errors';\n\ntype InitOptions = {\n  apiKey: string;\n  baseURL?: string;\n  timeout?: number;\n  retries?: number;\n};\n\nlet client: AxiosInstance;\n\nexport const initClient = ({\n  apiKey,\n  baseURL = 'https://api.onetime.dev',\n  timeout = 5000,\n  retries = 2,\n}: InitOptions) => {\n  client = axios.create({\n    baseURL,\n    timeout,\n    headers: {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    },\n  });\n\n  // Interceptor: Retry failed requests\n  client.interceptors.response.use(undefined, async (error: AxiosError) => {\n    const config = error.config as any;\n    if (!config || !config.retryCount) config.retryCount = 0;\n\n    const shouldRetry =\n      error.code === 'ECONNABORTED' ||\n      error.message.includes('timeout') ||\n      (typeof error.response?.status === 'number' && error.response.status >= 500);\n\n    if (shouldRetry && config.retryCount < retries) {\n      config.retryCount += 1;\n      await new Promise(res => setTimeout(res, 2 ** config.retryCount * 100)); // Exponential backoff\n      return client(config);\n    }\n\n    // Handle known errors\n    if (error.response) {\n      const data = error.response.data as { message?: string } | undefined;\n      if (error.response?.status && error.response.status >= 400 && error.response.status < 500) {\n        throw new OnetimeClientError(data?.message || 'Client Error', error.response.status);\n      }\n      if (error.response?.status && error.response.status >= 500) {\n        throw new OnetimeServerError(data?.message || 'Server Error', error.response.status);\n      }\n    }\n\n    // Network error or timeout\n    throw new OnetimeNetworkError(error.message || 'Network Error');\n  });\n\n  return client;\n};\n\nexport const getClient = () => {\n  if (!client) throw new Error('OneTime SDK not initialized. Call initOTPClient() first.');\n  return client;\n};\n","// src/errors.ts\n\nexport class OnetimeClientError extends Error {\n    statusCode: number;\n    constructor(message: string, statusCode = 400) {\n      super(message);\n      this.name = 'OnetimeClientError';\n      this.statusCode = statusCode;\n    }\n  }\n  \n  export class OnetimeServerError extends Error {\n    statusCode: number;\n    constructor(message: string, statusCode = 500) {\n      super(message);\n      this.name = 'OnetimeServerError';\n      this.statusCode = statusCode;\n    }\n  }\n  \n  export class OnetimeNetworkError extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = 'OnetimeNetworkError';\n    }\n  }\n  ","// src/otp.ts\n\nimport { getClient } from './client';\nimport { SendOTPParams, VerifyOTPParams } from './types';\n\nexport const sendOTP = async (params: SendOTPParams) => {\n  const client = getClient();\n  const res = await client.post('/send-otp', params);\n  return res.data;\n};\n\nexport const verifyOTP = async (params: VerifyOTPParams) => {\n  const client = getClient();\n  const res = await client.post('/verify-otp', params);\n  return res.data;\n};\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,EAAA,YAAAC,EAAA,cAAAC,IAAA,eAAAC,EAAAL,GCCA,IAAAM,EAAiD,oBCC1C,IAAMC,EAAN,cAAiC,KAAM,CAE1C,YAAYC,EAAiBC,EAAa,IAAK,CAC7C,MAAMD,CAAO,EACb,KAAK,KAAO,qBACZ,KAAK,WAAaC,CACpB,CACF,EAEaC,EAAN,cAAiC,KAAM,CAE5C,YAAYF,EAAiBC,EAAa,IAAK,CAC7C,MAAMD,CAAO,EACb,KAAK,KAAO,qBACZ,KAAK,WAAaC,CACpB,CACF,EAEaE,EAAN,cAAkC,KAAM,CAC7C,YAAYH,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,qBACd,CACF,EDVF,IAAII,EAESC,EAAa,CAAC,CACzB,OAAAC,EACA,QAAAC,EAAU,0BACV,QAAAC,EAAU,IACV,QAAAC,EAAU,CACZ,KACEL,EAAS,EAAAM,QAAM,OAAO,CACpB,QAAAH,EACA,QAAAC,EACA,QAAS,CACP,cAAiB,UAAUF,CAAM,GACjC,eAAgB,kBAClB,CACF,CAAC,EAGDF,EAAO,aAAa,SAAS,IAAI,OAAW,MAAOO,GAAsB,CAjC3E,IAAAC,EAAAC,EAAAC,EAkCI,IAAMC,EAASJ,EAAM,OAQrB,IAPI,CAACI,GAAU,CAACA,EAAO,cAAYA,EAAO,WAAa,IAGrDJ,EAAM,OAAS,gBACfA,EAAM,QAAQ,SAAS,SAAS,GAC/B,QAAOC,EAAAD,EAAM,WAAN,YAAAC,EAAgB,SAAW,UAAYD,EAAM,SAAS,QAAU,MAEvDI,EAAO,WAAaN,EACrC,OAAAM,EAAO,YAAc,EACrB,MAAM,IAAI,QAAQC,GAAO,WAAWA,EAAK,GAAKD,EAAO,WAAa,GAAG,CAAC,EAC/DX,EAAOW,CAAM,EAItB,GAAIJ,EAAM,SAAU,CAClB,IAAMM,EAAON,EAAM,SAAS,KAC5B,IAAIE,EAAAF,EAAM,WAAN,MAAAE,EAAgB,QAAUF,EAAM,SAAS,QAAU,KAAOA,EAAM,SAAS,OAAS,IACpF,MAAM,IAAIO,GAAmBD,GAAA,YAAAA,EAAM,UAAW,eAAgBN,EAAM,SAAS,MAAM,EAErF,IAAIG,EAAAH,EAAM,WAAN,MAAAG,EAAgB,QAAUH,EAAM,SAAS,QAAU,IACrD,MAAM,IAAIQ,GAAmBF,GAAA,YAAAA,EAAM,UAAW,eAAgBN,EAAM,SAAS,MAAM,CAEvF,CAGA,MAAM,IAAIS,EAAoBT,EAAM,SAAW,eAAe,CAChE,CAAC,EAEMP,GAGIiB,EAAY,IAAM,CAC7B,GAAI,CAACjB,EAAQ,MAAM,IAAI,MAAM,0DAA0D,EACvF,OAAOA,CACT,EEhEO,IAAMkB,EAAU,MAAOC,IAEhB,MADGC,EAAU,EACA,KAAK,YAAaD,CAAM,GACtC,KAGAE,EAAY,MAAOF,IAElB,MADGC,EAAU,EACA,KAAK,cAAeD,CAAM,GACxC,KHRN,IAAMG,EAAiBC,GAAkC,CAC9DC,EAAWD,CAAO,CACpB","names":["index_exports","__export","initOTPClient","sendOTP","verifyOTP","__toCommonJS","import_axios","OnetimeClientError","message","statusCode","OnetimeServerError","OnetimeNetworkError","client","initClient","apiKey","baseURL","timeout","retries","axios","error","_a","_b","_c","config","res","data","OnetimeClientError","OnetimeServerError","OnetimeNetworkError","getClient","sendOTP","params","getClient","verifyOTP","initOTPClient","options","initClient"]}